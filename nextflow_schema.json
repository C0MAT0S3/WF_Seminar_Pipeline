{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "rna-bfjt pipeline parameters",
    "description": "RNA sequencing analysis pipeline",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "schema": "schema_input.json",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 4 columns, and a header row. See [usage docs](https://nf-co.re/rnaseq/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "description": "The output directory where the results will be saved."
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"]
                }
            }
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes reference."
                },
                "splicesites": {
                    "type": "string",
                    "description": "Splice sites file required for HISAT2."
                },
                "save_reference": {
                    "type": "boolean",
                    "description": "If generated by the pipeline save the STAR index in the results directory."
                },
                "igenomes_base": {
                    "type": "string",
                    "description": "Directory / URL base for iGenomes references."
                }
            }
        },
        "read_trimming_options": {
            "title": "Read trimming options",
            "type": "object",
            "description": "Options to adjust read trimming criteria.",
            "properties": {
                "trimmer": {
                    "type": "string",
                    "default": "trimgalore",
                    "description": "Specifies the trimming tool to use - available options are 'trimgalore' and 'fastp'.",
                    "enum": ["trimgalore", "fastp"]
                },
                "extra_trimgalore_args": {
                    "type": "string",
                    "description": "Extra arguments to pass to Trim Galore! command in addition to defaults defined by the pipeline."
                },
                "min_trimmed_reads": {
                    "type": "integer",
                    "default": 1000,
                    "description": "Minimum number of trimmed reads below which samples are removed from further processing."
                },
                "save_trimmed": {
                    "type": "boolean",
                    "description": "Save the trimmed FastQ files in the results directory."
                },
                "skip_trimming": {
                    "type": "boolean",
                    "description": "Skip the adapter trimming step."
                }
            }
        },
        "umi_options": {
            "title": "UMI options",
            "type": "object",
            "description": "Options for processing reads with unique molecular identifiers.",
            "properties": {
                "with_umi": {
                    "type": "boolean",
                    "description": "Enable UMI-based read deduplication."
                },
                "skip_umi_extract": {
                    "type": "boolean",
                    "description": "Skip the UMI extraction if already processed outside the workflow."
                },
                "umitools_extract_method": {
                    "type": "string",
                    "default": "string",
                    "description": "UMI pattern to use. Can be either 'string' (default) or 'regex'."
                },
                "umitools_grouping_method": {
                    "type": "string",
                    "default": "directional",
                    "description": "Method to determine read groups by subsuming those with similar UMIs.",
                    "enum": ["unique", "percentile", "cluster", "adjacency", "directional"]
                },
                "umitools_dedup_stats": {
                    "type": "boolean",
                    "description": "Generate output stats when running \"umi_tools dedup\"."
                },
                "umitools_bc_pattern": {
                    "type": "string",
                    "description": "The UMI barcode pattern to use e.g., 'NNNNNN' for first 6 nucleotides as UMI."
                },
                "umitools_bc_pattern2": {
                    "type": "string",
                    "description": "The UMI barcode pattern to use if the UMI is in read 2."
                },
                "umitools_umi_separator": {
                    "type": "string",
                    "description": "Character that separates the UMI in the read name."
                },
                "umi_discard_read": {
                    "type": "integer",
                    "description": "After UMI extraction, discard either R1 or R2 by setting this to 1 or 2, respectively."
                },
                "save_umi_intermeds": {
                    "type": "boolean",
                    "description": "Save intermediate FastQ and BAM files produced by UMI-tools."
                }
            }
        },
        "alignment_options": {
            "title": "Alignment options",
            "type": "object",
            "description": "Options to adjust parameters and filtering criteria for read alignments.",
            "properties": {
                "aligner": {
                    "type": "string",
                    "default": "hisat2",
                    "description": "Specifies the alignment algorithm to use.",
                    "enum": ["hisat2"]
                },
                "seq_center": {
                    "type": "string",
                    "description": "Sequencing center information to be added to read group of BAM files."
                },
                "hisat2_build_memory": {
                    "type": "string",
                    "default": "12GB",
                    "description": "Minimum memory required for HISAT2 index build."
                },
                "save_unaligned": {
                    "type": "boolean",
                    "description": "Save unaligned reads in the results directory."
                },
                "save_align_intermeds": {
                    "type": "boolean",
                    "description": "Save intermediate BAM files from the alignment step."
                },
                "skip_markduplicates": {
                    "type": "boolean",
                    "description": "Skip picard MarkDuplicates step."
                }
            }
        },
        "quality_control": {
            "title": "Quality Control",
            "type": "object",
            "description": "Quality control options for the workflow.",
            "properties": {
                "skip_fastqc": {
                    "type": "boolean",
                    "description": "Skip FastQC."
                }
            }
        },
        "multiqc_options": {
            "title": "MultiQC options",
            "type": "object",
            "description": "Options for customizing the MultiQC report.",
            "properties": {
                "multiqc_config": {
                    "type": "string",
                    "description": "Custom config file for MultiQC."
                },
                "multiqc_logo": {
                    "type": "string",
                    "description": "Custom logo file for MultiQC."
                },
                "multiqc_methods_description": {
                    "type": "string",
                    "description": "Custom MultiQC yaml file containing a methods description."
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "description": "Set the top limit for requested resources for any single job.",
            "properties": {
                "max_memory": {
                    "type": "string",
                    "default": "12.GB",
                    "description": "Maximum amount of memory requested for any single job."
                },
                "max_cpus": {
                    "type": "integer",
                    "default": 6,
                    "description": "Maximum number of CPUs requested for any single job."
                },
                "max_time": {
                    "type": "string",
                    "default": "12.h",
                    "description": "Maximum amount of time requested for any single job."
                }
            }
        }
    },
    "allOf": [
        { "$ref": "#/definitions/input_output_options" },
        { "$ref": "#/definitions/reference_genome_options" },
        { "$ref": "#/definitions/read_trimming_options" },
        { "$ref": "#/definitions/umi_options" },
        { "$ref": "#/definitions/alignment_options" },
        { "$ref": "#/definitions/quality_control" },
        { "$ref": "#/definitions/multiqc_options" },
        { "$ref": "#/definitions/max_job_request_options" }
    ]
}