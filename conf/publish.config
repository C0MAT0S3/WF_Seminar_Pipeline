// Publishing directives
if (!params.skip_fastqc) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
            ext.prefix = { "${meta.id}_raw" }
            publishDir = [
                path: { "${params.outdir}/fastqc/raw" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.with_umi && !params.skip_umi_extract) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
            ext.args   = { [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                    params.umitools_umi_separator  ? "--umi-separator='${params.umitools_umi_separator}'" : ''
            ].join(' ').trim() }
            publishDir = [
                [
                    path: { "${params.outdir}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { params.save_umi_intermeds ? "${params.outdir}/umitools" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { params.save_umi_intermeds ? it : null }
                ]
            ]
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
            ext.args   = {
                // Function to convert argument strings into a map
                def argsToMap = { String args ->
                    args.split("\\s(?=--)").collectEntries {
                        def parts = it.trim().split(/\s+/, 2)
                        [(parts.first()): parts.last()]
                    }
                }

                // Initialize the map with preconfigured values
                def preset_args_map = argsToMap("""
                --fastqc_args '-t ${task.cpus}'
                """.trim())

                // Consolidate the extra arguments
                def final_args_map = preset_args_map + (params.extra_trimgalore_args ? argsToMap(params.extra_trimgalore_args) : [:])

                // Convert the map back to a list and then to a single string
                final_args_map.collect { key, value -> "${key} ${value}" }.join(' ').trim()
            }
            ext.prefix = { "${meta.id}_trimmed" }
            publishDir = [
                [
                    path: { "${params.outdir}/fastqc/trim" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { params.save_trimmed ? "${params.outdir}/${params.trimmer}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    saveAs: { params.save_trimmed ? it : null }
                ],
                [
                    path: { "${params.outdir}/${params.trimmer}" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

process {
    // Default publishing logic for pipeline
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'FASTQ_ALIGN_HISAT2:HISAT2_ALIGN' {
        ext.args   = '--met-stderr --new-summary --dta'
        ext.prefix = { "${meta.id}.aligned" }
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { params.save_align_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                saveAs: { params.save_align_intermeds ? "aligned_${it}" : null }
            ],
            [
                path: { params.save_unaligned ? "${params.outdir}/${params.aligner}/unmapped" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                saveAs: { params.save_unaligned ? it : null }
            ]
        ]
    }

    withName: 'FASTQ_ALIGN_HISAT2:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: 'GUNZIP_.*' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'UNTAR_.*|HISAT2_BUILD' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome/index" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'HISAT2_EXTRACTSPLICESITES' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome/index" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'CUSTOM_GETCHROMSIZES' {
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                ext.args   = '--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
                ext.prefix = { "${meta.id}.markdup.sorted" }
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/picard_metrics" },
                        mode: params.publish_dir_mode,
                        pattern: '*metrics.txt'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam'
                    ]
                ]
            }

    withName: 'BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX' {
        ext.args   = { params.bam_csi_index ? '-c' : '' }
        ext.prefix = { "${meta.id}.markdup.sorted" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}'
        ]
    }

    withName: 'BAM_MARKDUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.markdup.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }
}